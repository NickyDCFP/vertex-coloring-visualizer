{"ast":null,"code":"import * as d3 from 'd3';\n//if you add event listeners, be sure to remove them when you delete the node or destroy\n//the graph\nconst radius = 7;\n\n// const handleClick = (event, clicked) => {\n//     event.stopPropagation();\n//     console.log(event);\n//     console.log(event.target.tagName);\n//     console.log(clicked);\n//   }\n\nexport class Graph {\n  constructor(svg, centerX, centerY, defaultColor) {\n    this.adj = new Map();\n    this.nodes = [];\n    this.edges = [];\n    this.v = 0;\n    this.defaultColor = defaultColor;\n    this.simulation = d3.forceSimulation(this.nodes);\n    // .force(\"link\", d3.forceLink(this.edges).strength(0))\n    // .force(\"collide\", d3.forceCollide().radius(30))\n    // .force(\"center\", d3.forceCenter(centerX, centerY))\n    // .force(\"x\", d3.forceX().x(centerX))\n    // .force(\"y\", d3.forceY().y(centerY).strength(0.5));\n    this.svg = svg.on('click', (event, d) => this.handleClick(event, d));\n    this.circles = this.svg.append('g').classed('node-group', true);\n    this.lines = this.svg.append('g').classed('edge-group', true);\n    this.lines.lower();\n    this.simulation.on(\"tick\", () => {\n      this.circles.selectAll(\".node\").attr('cx', node => node.x).attr('cy', node => node.y);\n      //   text\n      //     .attr('x', node => node.x)\n      //     .attr('y', node => node.y);\n      this.lines.selectAll(\".edge\").attr('x1', edge => edge.source.x).attr('x2', edge => edge.target.x).attr('y1', edge => edge.source.y).attr('y2', edge => edge.target.y);\n    });\n  }\n  handleClick(event, clicked) {\n    event.stopPropagation();\n    console.log(event);\n    if (event.target.tagName === 'svg') {\n      // console.log(this);\n      const node = {\n        id: this.v,\n        color: this.defaultColor,\n        x: event.clientX,\n        y: event.clientY\n      };\n      // console.log(node);\n      this.nodes.push(node);\n      this.adj.set(this.v++, {\n        node,\n        neighbors: []\n      });\n      this.simulation.nodes(this.nodes).alpha(0.2).restart();\n      this.updateNodes();\n    }\n  }\n  updateNodes() {\n    this.circles.selectAll('.node').data(this.nodes).enter().append('circle').classed('node', true).attr('fill', node => node.color).attr('stroke', 'black').attr('r', radius);\n    // .on('click', handleClick);\n  }\n\n  updateEdges() {\n    this.lines.selectAll('.edge').data(this.edges).enter().append('line').classed('edge', true)\n    // .on('click', handleClick)\n    .on('mouseover', event => {\n      d3.select(event.currentTarget).style('stroke', 'red').raise();\n    }).on('mouseout', event => {\n      d3.select(event.currentTarget).style('stroke', 'gray');\n    }).lower();\n  }\n  addNode() {\n    const node = {\n      id: this.v,\n      color: this.defaultColor\n    };\n    this.nodes.push(node);\n    this.adj.set(this.v++, {\n      node,\n      neighbors: []\n    });\n    this.simulation.nodes(this.nodes).alpha(0.2).restart();\n    this.updateNodes();\n  }\n  addEdge(source, target) {\n    if (source === target || this.adj.get(source).neighbors.includes(target)) return;\n    this.adj.get(source).neighbors.push(target);\n    this.adj.get(target).neighbors.push(source);\n    this.edges.push({\n      source: this.adj.get(source).node,\n      target: this.adj.get(target).node\n    });\n    this.simulation.force(\"link\", d3.forceLink(this.edges));\n    this.updateEdges();\n  }\n  recolor(vertex, color) {\n    this.adj.get(vertex).node.color = color;\n  }\n}\n;","map":{"version":3,"names":["d3","radius","Graph","constructor","svg","centerX","centerY","defaultColor","adj","Map","nodes","edges","v","simulation","forceSimulation","on","event","d","handleClick","circles","append","classed","lines","lower","selectAll","attr","node","x","y","edge","source","target","clicked","stopPropagation","console","log","tagName","id","color","clientX","clientY","push","set","neighbors","alpha","restart","updateNodes","data","enter","updateEdges","select","currentTarget","style","raise","addNode","addEdge","get","includes","force","forceLink","recolor","vertex"],"sources":["C:/Users/14086/Documents/literally the only good class at this school/2/Project - Vertex Coloring/planar_graph_coloring/src/Graph.js"],"sourcesContent":["import * as d3 from 'd3';\r\n//if you add event listeners, be sure to remove them when you delete the node or destroy\r\n//the graph\r\nconst radius = 7;\r\n\r\n// const handleClick = (event, clicked) => {\r\n//     event.stopPropagation();\r\n//     console.log(event);\r\n//     console.log(event.target.tagName);\r\n//     console.log(clicked);\r\n//   }\r\n\r\nexport class Graph {\r\n    constructor(svg, centerX, centerY, defaultColor) {\r\n        this.adj = new Map();\r\n        this.nodes = [];\r\n        this.edges = [];\r\n        this.v = 0;\r\n        this.defaultColor = defaultColor;\r\n        this.simulation = d3.forceSimulation(this.nodes);\r\n            // .force(\"link\", d3.forceLink(this.edges).strength(0))\r\n            // .force(\"collide\", d3.forceCollide().radius(30))\r\n            // .force(\"center\", d3.forceCenter(centerX, centerY))\r\n            // .force(\"x\", d3.forceX().x(centerX))\r\n            // .force(\"y\", d3.forceY().y(centerY).strength(0.5));\r\n        this.svg = svg\r\n            .on('click', (event, d) => this.handleClick(event, d));\r\n        this.circles = this.svg.append('g')\r\n            .classed('node-group', true);\r\n        this.lines = this.svg.append('g')\r\n            .classed('edge-group', true);\r\n        this.lines.lower();\r\n        this.simulation.on(\"tick\", () => {\r\n            this.circles.selectAll(\".node\")\r\n                .attr('cx', node => node.x)\r\n                .attr('cy', node => node.y);\r\n    //   text\r\n    //     .attr('x', node => node.x)\r\n    //     .attr('y', node => node.y);\r\n            this.lines.selectAll(\".edge\")\r\n                .attr('x1', edge => edge.source.x)\r\n                .attr('x2', edge => edge.target.x)\r\n                .attr('y1', edge => edge.source.y)\r\n                .attr('y2', edge => edge.target.y);\r\n        });\r\n    }\r\n    handleClick(event, clicked) {\r\n        event.stopPropagation();\r\n        console.log(event);\r\n        if(event.target.tagName === 'svg') {\r\n            // console.log(this);\r\n            const node = {id: this.v, color: this.defaultColor, x: event.clientX, y: event.clientY}\r\n            // console.log(node);\r\n            this.nodes.push(node);\r\n            this.adj.set(this.v++, {node, neighbors: []});\r\n            this.simulation.nodes(this.nodes).alpha(0.2).restart();\r\n            this.updateNodes();\r\n        }\r\n    }\r\n    updateNodes() {\r\n        this.circles\r\n            .selectAll('.node')\r\n            .data(this.nodes)\r\n            .enter()\r\n            .append('circle')\r\n            .classed('node', true)\r\n            .attr('fill', node => node.color)\r\n            .attr('stroke', 'black')\r\n            .attr('r', radius);\r\n            // .on('click', handleClick);\r\n    }\r\n    updateEdges() {\r\n        this.lines\r\n            .selectAll('.edge')\r\n            .data(this.edges)\r\n            .enter()\r\n            .append('line')\r\n            .classed('edge', true)\r\n            // .on('click', handleClick)\r\n            .on('mouseover', (event) => {\r\n                d3.select(event.currentTarget)\r\n                .style('stroke', 'red')\r\n                .raise();\r\n            })\r\n            .on('mouseout', (event) => {\r\n                d3.select(event.currentTarget)\r\n                .style('stroke', 'gray')\r\n            })\r\n            .lower();\r\n    }\r\n    addNode() {\r\n        const node = {id: this.v, color: this.defaultColor}\r\n        this.nodes.push(node);\r\n        this.adj.set(this.v++, {node, neighbors: []});\r\n        this.simulation.nodes(this.nodes).alpha(0.2).restart();\r\n        this.updateNodes();\r\n    }\r\n    addEdge(source, target) {\r\n        if(source === target || this.adj.get(source).neighbors.includes(target)) return;\r\n        this.adj.get(source).neighbors.push(target);\r\n        this.adj.get(target).neighbors.push(source);\r\n        this.edges.push({source: this.adj.get(source).node, target: this.adj.get(target).node});\r\n        this.simulation.force(\"link\", d3.forceLink(this.edges));\r\n        this.updateEdges();\r\n    }\r\n    recolor(vertex, color) {\r\n        this.adj.get(vertex).node.color = color;\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
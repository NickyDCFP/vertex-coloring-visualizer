{"ast":null,"code":"import * as d3 from 'd3';\n//if you add event listeners, be sure to remove them when you delete the node or destroy\n//the graph\n\n// When you have a potential edge and let go, it creates a new node\n// When you have a \nconst radius = 7;\nconst edgeEquals = (edge1, edge2) => {\n  return edge1.source.id === edge2.source.id && edge1.target.id === edge2.target.id || edge1.source.id === edge2.target.id && edge1.target.id === edge2.source.id;\n};\nexport class Graph {\n  constructor(svg, centerX, centerY, defaultColor, doText) {\n    this.adj = new Map();\n    this.nodes = [];\n    this.edges = [];\n    this.v = 0;\n    this.defaultColor = defaultColor;\n    this.simulation = d3.forceSimulation(this.nodes);\n    // .force('link', d3.forceLink(this.edges).strength(0))\n    // .force('collide', d3.forceCollide().radius(30))\n    // .force('x', d3.forceX().x(centerX).strength(0.2))\n    // .force('y', d3.forceY().y(centerY).strength(0.2));\n    this.svg = svg.on('mouseup', (event, d) => this.handleMouseUp(event, d)).on('click', (event, d) => this.handleClick(event, d)).style(\"cursor\", \"crosshair\");\n    this.circles = this.svg.append('g').classed('node-group', true);\n    this.lines = this.svg.append('g').classed('edge-group', true);\n    this.lines.lower();\n    this.doText = doText;\n    this.text = this.svg.append('g').classed('text-group', true);\n    this.text.raise();\n    this.selectedNode = null;\n    this.potentialEdge = null;\n    this.simulation.on('tick', () => {\n      this.circles.selectAll('.node').attr('cx', node => node.x).attr('cy', node => node.y);\n      this.text.selectAll('.node-label').attr('x', node => node.x).attr('y', node => node.y + 1);\n      this.lines.selectAll('.edge').attr('x1', edge => edge.source.x).attr('x2', edge => edge.target.x).attr('y1', edge => edge.source.y).attr('y2', edge => edge.target.y);\n    });\n  }\n  handleClick(event, clicked) {\n    event.stopPropagation();\n    if (event.target.tagName === 'line') {\n      this.removeEdge(clicked.source, clicked.target);\n    } else if (event.target.tagName === 'svg') {\n      if (!this.selectedNode && !this.potentialLine) this.addNode(event.clientX, event.clientY);\n      this.selectedNode = null;\n    }\n  }\n  handleMouseDown(event, clicked) {\n    event.stopPropagation();\n    if (event.target.tagName === 'circle') {\n      this.svg.on('mousemove', (event, clicked) => this.handleMouseMove(event, clicked));\n      this.potentialLine = this.svg.append('line').classed('edge', true).attr('x1', clicked.x).attr('y1', clicked.y).attr('x2', clicked.x).attr('y2', clicked.y).attr('stroke', 'gray').lower();\n      this.selectedNode = clicked;\n    }\n  }\n  handleMouseUp(event, clicked) {\n    event.stopPropagation();\n    this.svg.on('mousemove', null);\n    if (this.potentialLine) {\n      this.potentialLine.remove();\n      this.potentialLine = null;\n    }\n    if (event.target.tagName === 'circle') {\n      if (this.selectedNode) this.addEdge(this.selectedNode.id, clicked.id);\n    }\n    this.selectedNode = null;\n  }\n  handleMouseMove(event, clicked) {\n    if (this.potentialLine) {\n      this.potentialLine.attr('x2', event.clientX).attr('y2', event.clientY);\n    }\n  }\n  updateNodes() {\n    this.circles.selectAll('.node').data(this.nodes).enter().append('circle').classed('node', true).attr('fill', node => node.color).attr('stroke', 'black').attr('r', radius).on('mousedown', (event, clicked) => this.handleMouseDown(event, clicked)).on('mouseup', (event, clicked) => this.handleMouseUp(event, clicked));\n    this.circles.exit().remove();\n    this.text.selectAll('.text-label').data(this.nodes).enter().append('text').classed('node-label', true).attr('text-anchor', 'middle').attr('alignment-baseline', 'middle').style('pointer-events', 'none').style('user-select', 'none').style('font-size', '0.5em').text(node => this.doText ? node.id : \"\");\n    this.text.exit().remove();\n  }\n  updateEdges() {\n    this.simulation.force('link', d3.forceLink(this.edges));\n    const lines = this.lines.selectAll('.edge').data(this.edges);\n    lines.exit().remove();\n    lines.enter().append('line').classed('edge', true).on('click', (event, clicked) => this.handleClick(event, clicked)).on('mouseover', event => {\n      d3.select(event.currentTarget).style('stroke', 'red').raise();\n    }).on('mouseout', event => {\n      d3.select(event.currentTarget).style('stroke', 'gray');\n    }).lower();\n    this.simulation.alpha(0.2).restart();\n  }\n  addNode(x, y) {\n    const node = {\n      id: this.v,\n      color: this.defaultColor,\n      x,\n      y\n    };\n    this.nodes.push(node);\n    this.adj.set(this.v++, {\n      node,\n      neighbors: []\n    });\n    this.simulation.nodes(this.nodes).alpha(0.2).restart();\n    this.updateNodes();\n  }\n  addEdge(source, target) {\n    if (source === target || this.adj.get(source).neighbors.includes(target)) return;\n    this.adj.get(source).neighbors.push(target);\n    this.adj.get(target).neighbors.push(source);\n    this.edges.push({\n      source: this.adj.get(source).node,\n      target: this.adj.get(target).node\n    });\n    this.updateEdges();\n  }\n  removeEdge(source, target) {\n    this.adj.get(source.id).neighbors = this.adj.get(source.id).neighbors.filter(d => d !== target.id);\n    this.adj.get(target.id).neighbors = this.adj.get(target.id).neighbors.filter(d => d !== source.id);\n    this.edges = this.edges.filter(edge => !edgeEquals(edge, {\n      source,\n      target\n    }));\n    this.updateEdges();\n  }\n  recolor(vertex, color) {\n    this.adj.get(vertex).node.color = color;\n  }\n}\n;","map":{"version":3,"names":["d3","radius","edgeEquals","edge1","edge2","source","id","target","Graph","constructor","svg","centerX","centerY","defaultColor","doText","adj","Map","nodes","edges","v","simulation","forceSimulation","on","event","d","handleMouseUp","handleClick","style","circles","append","classed","lines","lower","text","raise","selectedNode","potentialEdge","selectAll","attr","node","x","y","edge","clicked","stopPropagation","tagName","removeEdge","potentialLine","addNode","clientX","clientY","handleMouseDown","handleMouseMove","remove","addEdge","updateNodes","data","enter","color","exit","updateEdges","force","forceLink","select","currentTarget","alpha","restart","push","set","neighbors","get","includes","filter","recolor","vertex"],"sources":["C:/Users/14086/Documents/literally the only good class at this school/2/Project - Vertex Coloring/planar_graph_coloring/src/Graph.js"],"sourcesContent":["import * as d3 from 'd3';\r\n//if you add event listeners, be sure to remove them when you delete the node or destroy\r\n//the graph\r\n\r\n// When you have a potential edge and let go, it creates a new node\r\n// When you have a \r\nconst radius = 7;\r\n\r\nconst edgeEquals = (edge1, edge2) => {\r\n    return (edge1.source.id === edge2.source.id && edge1.target.id === edge2.target.id) ||\r\n           (edge1.source.id === edge2.target.id && edge1.target.id === edge2.source.id);\r\n}\r\n\r\n\r\nexport class Graph {\r\n    constructor(svg, centerX, centerY, defaultColor, doText) {\r\n        this.adj = new Map();\r\n        this.nodes = [];\r\n        this.edges = [];\r\n        this.v = 0;\r\n        this.defaultColor = defaultColor;\r\n        this.simulation = d3.forceSimulation(this.nodes);\r\n            // .force('link', d3.forceLink(this.edges).strength(0))\r\n            // .force('collide', d3.forceCollide().radius(30))\r\n            // .force('x', d3.forceX().x(centerX).strength(0.2))\r\n            // .force('y', d3.forceY().y(centerY).strength(0.2));\r\n        this.svg = svg.on('mouseup', (event, d) => this.handleMouseUp(event, d))\r\n            .on('click', (event, d) => this.handleClick(event, d))\r\n            .style(\"cursor\", \"crosshair\");\r\n        this.circles = this.svg.append('g')\r\n            .classed('node-group', true);\r\n        this.lines = this.svg.append('g')\r\n            .classed('edge-group', true);\r\n        this.lines.lower();\r\n        this.doText = doText;\r\n        this.text = this.svg.append('g')\r\n            .classed('text-group', true);\r\n        this.text.raise();\r\n        this.selectedNode = null;\r\n        this.potentialEdge = null;\r\n        this.simulation.on('tick', () => {\r\n            this.circles.selectAll('.node')\r\n                .attr('cx', node => node.x)\r\n                .attr('cy', node => node.y);\r\n            this.text.selectAll('.node-label')\r\n                .attr('x', node => node.x)\r\n                .attr('y', node => node.y + 1);\r\n            this.lines.selectAll('.edge')\r\n                .attr('x1', edge => edge.source.x)\r\n                .attr('x2', edge => edge.target.x)\r\n                .attr('y1', edge => edge.source.y)\r\n                .attr('y2', edge => edge.target.y);\r\n        });\r\n    }\r\n    handleClick(event, clicked) {\r\n        event.stopPropagation();\r\n        if(event.target.tagName === 'line') {\r\n            this.removeEdge(clicked.source, clicked.target);\r\n        }\r\n        else if(event.target.tagName === 'svg') {\r\n            if(!this.selectedNode && !this.potentialLine) this.addNode(event.clientX, event.clientY);\r\n            this.selectedNode = null;\r\n        }\r\n    }\r\n    handleMouseDown(event, clicked) {\r\n        event.stopPropagation();\r\n        if(event.target.tagName === 'circle') {\r\n            this.svg.on('mousemove', (event, clicked) => this.handleMouseMove(event, clicked))\r\n            this.potentialLine = this.svg.append('line')\r\n                .classed('edge', true)\r\n                .attr('x1', clicked.x)\r\n                .attr('y1', clicked.y)\r\n                .attr('x2', clicked.x)\r\n                .attr('y2', clicked.y)\r\n                .attr('stroke', 'gray')\r\n                .lower();\r\n            this.selectedNode = clicked;\r\n        }\r\n    }\r\n    handleMouseUp(event, clicked) {\r\n        event.stopPropagation();\r\n        this.svg.on('mousemove', null);\r\n        if(this.potentialLine) {\r\n            this.potentialLine.remove();\r\n            this.potentialLine = null;\r\n        }\r\n        if(event.target.tagName === 'circle') {\r\n            if(this.selectedNode) this.addEdge(this.selectedNode.id, clicked.id);\r\n        }\r\n        this.selectedNode = null;\r\n    }\r\n    handleMouseMove(event, clicked) {\r\n        if(this.potentialLine) {\r\n            this.potentialLine\r\n                .attr('x2', event.clientX)\r\n                .attr('y2', event.clientY);\r\n        }\r\n    }\r\n    updateNodes() {\r\n        this.circles\r\n            .selectAll('.node')\r\n            .data(this.nodes)\r\n            .enter()\r\n            .append('circle')\r\n            .classed('node', true)\r\n            .attr('fill', node => node.color)\r\n            .attr('stroke', 'black')\r\n            .attr('r', radius)\r\n            .on('mousedown', (event, clicked) => this.handleMouseDown(event, clicked))\r\n            .on('mouseup', (event, clicked) => this.handleMouseUp(event, clicked));\r\n        this.circles.exit().remove();\r\n        this.text\r\n            .selectAll('.text-label')\r\n            .data(this.nodes)\r\n            .enter()\r\n            .append('text')\r\n            .classed('node-label', true)\r\n            .attr('text-anchor', 'middle')\r\n            .attr('alignment-baseline', 'middle')\r\n            .style('pointer-events', 'none')\r\n            .style('user-select', 'none')\r\n            .style('font-size', '0.5em')\r\n            .text(node => this.doText ? node.id : \"\");\r\n        this.text.exit().remove();\r\n    }\r\n    updateEdges() {\r\n        this.simulation.force('link', d3.forceLink(this.edges));\r\n        const lines = this.lines\r\n            .selectAll('.edge')\r\n            .data(this.edges);\r\n        lines.exit().remove();\r\n        lines.enter()\r\n            .append('line')\r\n            .classed('edge', true)\r\n            .on('click', (event, clicked) => this.handleClick(event, clicked))\r\n            .on('mouseover', (event) => {\r\n                d3.select(event.currentTarget)\r\n                .style('stroke', 'red')\r\n                .raise();\r\n            })\r\n            .on('mouseout', (event) => {\r\n                d3.select(event.currentTarget)\r\n                .style('stroke', 'gray')\r\n            })\r\n            .lower();\r\n        this.simulation.alpha(0.2).restart();\r\n    }\r\n    addNode(x, y) {\r\n        const node = {id: this.v, color: this.defaultColor, x, y}\r\n        this.nodes.push(node);\r\n        this.adj.set(this.v++, {node, neighbors: []});\r\n        this.simulation.nodes(this.nodes).alpha(0.2).restart();\r\n        this.updateNodes();\r\n    }\r\n    addEdge(source, target) {\r\n        if(source === target || this.adj.get(source).neighbors.includes(target)) return;\r\n        this.adj.get(source).neighbors.push(target);\r\n        this.adj.get(target).neighbors.push(source);\r\n        this.edges.push({source: this.adj.get(source).node, target: this.adj.get(target).node});\r\n        this.updateEdges();\r\n    }\r\n    removeEdge(source, target) {\r\n        this.adj.get(source.id).neighbors = this.adj.get(source.id).neighbors.filter(d => d !== target.id);\r\n        this.adj.get(target.id).neighbors = this.adj.get(target.id).neighbors.filter(d => d !== source.id);\r\n        this.edges = this.edges.filter(edge => !edgeEquals(edge, {source, target}));\r\n        this.updateEdges();\r\n    }\r\n    recolor(vertex, color) {\r\n        this.adj.get(vertex).node.color = color;\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}